

//Welcome to the ballpit baby










#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include <cmath>
#include <thread>
#include <chrono>
#include <vector>

// Constants
const int resolution = 20;
const int screen_width = 800;
const int screen_height = 600;
const float g = 9.81f; // Gravitational field strength (m/s^2)
const float sizemult = 1.01f; // Size multiplier
const int tmax = 100;
const int tstep = 60; // Time step (fps)

// Ball structure
struct Ball {
    sf::CircleShape shape;
    sf::Vector2f position;
    sf::Vector2f velocity;
    float size;
    float apogeeThreshold;
    float bounceVelocityMultiplier;
};

// Function prototypes
void updateBounceMotion(Ball& ball);

int main() {
    // SFML window
    sf::RenderWindow window(sf::VideoMode(screen_width, screen_height), "Multiple Bouncing Balls");

    // Balls
    std::vector<Ball> balls = {
        {sf::CircleShape(20), sf::Vector2f(100, 100), sf::Vector2f(2, 2), 20, 400, 1.015f},
        {sf::CircleShape(15), sf::Vector2f(200, 200), sf::Vector2f(3, 3), 15, 300, 1.02f},
        {sf::CircleShape(25), sf::Vector2f(300, 300), sf::Vector2f(4, 4), 25, 500, 1.01f},
        {sf::CircleShape(18), sf::Vector2f(400, 400), sf::Vector2f(5, 5), 18, 450, 1.03f}
    };

    for (auto& ball : balls) {
        ball.shape.setFillColor(sf::Color::White);
        ball.shape.setPosition(ball.position);
    }

    // Main loop
    while (window.isOpen()) {
        // Process events
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Update bounce motion for each ball
        for (auto& ball : balls) {
            updateBounceMotion(ball);
            window.draw(ball.shape);
        }

        // Clear the window
        window.clear();

        // Display the window contents
        window.display();
    }

    return 0;
}

// Function to update bounce motion for each ball
void updateBounceMotion(Ball& ball) {
    float v0 = std::sqrt(ball.velocity.x * ball.velocity.x + ball.velocity.y * ball.velocity.y);
    float t = 0.0f;
    while (t <= tmax) {
        // Update position
        float xh = t * ball.velocity.x + ball.position.x;
        float yh = -g * t * t + t * ball.velocity.y + ball.position.y;

        // Check for collision with ground
        if (yh < ball.size) {
            // Update velocity and size for the next bounce
            ball.velocity.y *= -ball.bounceVelocityMultiplier;
            ball.size *= sizemult;

            // If apogee threshold is reached, change direction
            if (ball.size >= ball.apogeeThreshold) {
                ball.velocity.y *= -1;
                ball.apogeeThreshold *= 1.5; // Increase the threshold for the next bounce
            }

            // Break out of the loop
            break;
        }

        t += 1.0f / tstep;
    }

    // Update position
    ball.shape.setPosition(ball.position.x, ball.position.y - ball.size);
}
