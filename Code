#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include <cmath>
#include <thread>
#include <chrono>

// Constants
const int resolution = 20;
const int screen_width = 800;
const int screen_height = 600;
const float apogee_threshold = 500.0f; // Adjust as needed
const int note_sequence_length = 16;
const float g = 9.81f; // Gravitational field strength (m/s^2)
const float bounce_velocity_multiplier = 1.015f;
const float sizemult = 1.01f; // Size multiplier
const int tmax = 100;
const int tstep = 60; // Time step (fps)
const int max_bounces = 1000000000;
const float v1_initial = 2.0f; // Initial x velocity (m/s)
const float v2_initial = 2.0f; // Initial y velocity (m/s)

// Note sequences
sf::SoundBuffer noteBuffers[note_sequence_length];
sf::Sound noteSounds[note_sequence_length];

// Bounce count
int bounces = 0;

// Function prototypes
void playSound(int noteIndex);
void updateBounceMotion(float& x, float& y, float& v1, float& v2, float& size);

int main() {
    // Load sound files
    for (int i = 0; i < note_sequence_length; ++i) {
        std::string filename = "note" + std::to_string(i) + ".wav"; // Note: Adjust filenames accordingly
        if (!noteBuffers[i].loadFromFile(filename)) {
            std::cerr << "Failed to load sound file: " << filename << std::endl;
            return 1;
        }
        noteSounds[i].setBuffer(noteBuffers[i]);
    }

    // SFML window
    sf::RenderWindow window(sf::VideoMode(screen_width, screen_height), "Bouncing Ball");

    // Ball parameters
    float x = resolution / 2;
    float y = resolution / 2;
    float v1 = v1_initial;
    float v2 = v2_initial;
    float size = 1.0f;

    // Main loop
    while (window.isOpen() && bounces < max_bounces && size <= resolution + 0.5) {
        // Process events
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Update bounce motion
        updateBounceMotion(x, y, v1, v2, size);

        // Clear the window
        window.clear();

        // Draw the ball
        sf::CircleShape ball(size);
        ball.setFillColor(sf::Color::White);
        ball.setPosition((x - size) * resolution * 2, (y - size) * resolution * 2);
        window.draw(ball);

        // Display the window contents
        window.display();
    }

    return 0;
}

// Function to play sound
void playSound(int noteIndex) {
    noteSounds[noteIndex].play();
    std::this_thread::sleep_for(std::chrono::milliseconds(500)); // Adjust delay as needed
}

// Function to update bounce motion
void updateBounceMotion(float& x, float& y, float& v1, float& v2, float& size) {
    float v0 = std::sqrt(v1 * v1 + v2 * v2);
    float t = 0.0f;
    while (t <= tmax) {
        // Update position
        float xh = t * v1 + x;
        float yh = -g * t * t + t * v2 + y;

        // Check for collision with ground
        if (yh < size) {
            // Play sound
            playSound(bounces % note_sequence_length);

            // Update bounce count
            bounces++;

            // Update velocity and size for the next bounce
            v1 *= bounce_velocity_multiplier;
            v2 *= -bounce_velocity_multiplier;
            size *= sizemult;

            // Break out of the loop
            break;
        }

        t += 1.0f / tstep;
    }
}
